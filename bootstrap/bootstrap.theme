<?php
/**
 * @file
 * The primary PHP file for the Drupal Bootstrap base theme.
 *
 * This file should only contain light helper functions and point to stubs in
 * other files containing more complex functions.
 *
 * The stubs should point to files within the `./includes` directory named after
 * the function itself minus the theme prefix. If the stub contains a group of
 * functions, then please organize them so they are related in some way and name
 * the file appropriately to at least hint at what it contains.
 *
 * All [pre]process functions, theme functions and template files lives inside
 * the `./templates` directory. This is a highly automated and complex system
 * designed to only load the necessary files when a given theme hook is invoked.
 *
 * Visit this project's official documentation site, http://drupal-bootstrap.org
 * or the markdown files inside the `./docs` directory.
 *
 * @see bootstrap_theme()
 * @see \Drupal\bootstrap\Registry
 */

use Drupal\bootstrap\Bootstrap;
use Drupal\node\Entity\Node;

/**
 * Initialize the active theme.
 */
Bootstrap::initialize();

/**
 * {@inheritdoc}
 *
 * @see hook_bootstrap_colorize_text_alter().
 */
function bootstrap_bootstrap_colorize_text_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see hook_bootstrap_iconize_text_alter().
 */
function bootstrap_bootstrap_iconize_text_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see hook_bootstrap_layouts_class_options_alter().
 */
function bootstrap_bootstrap_layouts_class_options_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\ElementInfo::alter()
 */
function bootstrap_element_info_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Theme::alter()
 */
function bootstrap_form_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Form\SystemThemeSettings::alterForm()
 */
function bootstrap_form_system_theme_settings_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 */
function bootstrap_js_settings_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\LibraryInfo::alter()
 */
function bootstrap_library_info_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\PageAttachments::alter()
 */
function bootstrap_page_attachments_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Bootstrap::preprocess()
 */
function bootstrap_preprocess(&$variables, $hook, $info) {
  Bootstrap::preprocess($variables, $hook, $info);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Bootstrap::getInfo()
 */
function bootstrap_theme() {
  return Bootstrap::getThemeHooks();
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\ThemeRegistry::alter()
 *
 * @todo Remove once a proper replacement for the theme.registry service can be
 * created in a bootstrap_core sub-module.
 */
function bootstrap_theme_registry_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\ThemeSuggestions::alter()
 */
function bootstrap_theme_suggestions_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}
function bootstrap_preprocess_page(&$variables) {

  

    $block = \Drupal\block\Entity\Block::load('bootstrap_search'); 
    $variables['block_search_form'] = \Drupal::entityTypeManager()
        ->getViewBuilder('block')
        ->view($block);
         $block = \Drupal\block\Entity\Block::load('addressmenublock');
$variables['block_output'] = \Drupal::entityTypeManager()
  ->getViewBuilder('block')
  ->view($block);  
    $block = \Drupal\block\Entity\Block::load('languageswitcher_2');
  $variables['language_bar'] = \Drupal::entityTypeManager()
  ->getViewBuilder('block')
  ->view($block);  
  $block = \Drupal\block\Entity\Block::load('mycustomblock');
  $variables['exposed_custom'] = \Drupal::entityTypeManager()
  ->getViewBuilder('block')
  ->view($block);  
  /*$block = \Drupal::entityManager()->getStorage('block_content')->load(12);
    $block_view = \Drupal::entityManager()->getViewBuilder('block_content')->view($block);
    $variables['page']['content_right']['custom_block'] = $block_view;
  */
  global $base_url;
$variables['logopath'] =$base_url.'/'. drupal_get_path('theme','bootstrap') . '/images/mobileiron-planetm-logo.svg';
$variables['front_path'] =$base_url. '/node/4';


//if(arg(1) == 10){
//print "<pre>";print_r(arg(1));exit;
//}

//$path = \Drupal::request()->getpathInfo();
//$arg = explode('/',$path);
//dpm($arg);
//exit;
}
function bootstrap_preprocess_block(&$variables) {
   
      $variables['base_path'] = base_path();
    }

function bootstrap_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();

    if(\Drupal::currentUser()->isAnonymous() && ($content_type =="intro_5_" || $content_type =="datasheets" || $content_type =="whitepapers" || $content_type =="security_report"  || $content_type =="webinar"  || $content_type =="video"  || $content_type =="intro_1" || $content_type =="intro_2" || $content_type =="intro_3" || $content_type =="intro_4" || $content_type =="intro_5" || $content_type =="home_page" || $content_type =="surveys_and_studies")) {      
      $suggestions[] = 'page__header_exclude';
    }
    else {
      $suggestions[] = 'page__'.$content_type;
    }
  }
}
function bootstrap_form_comment_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == "comment_comment_form")
  {
   //kint($form);
    $form['actions']['preview']['#access'] = FALSE;
   $form['actions']['submit']['#value'] = t('POST COMMENT');
   $form['comment_body']['widget']['0']['#title']= FALSE;
   $form['#attributes']['class'][] = 'test';
}
                                               
}
function bootstrap_preprocess_node__event(&$variables) {
  $class = $variables['elements']['#node'];

  $dvm = $class->get('field_date')->value;
  $dvem = $class->get('field_end_date')->value;

  $variables['date_val_month'] = t(date('F',strtotime($dvm)));

  $variables['date_val_dates'] = "";
  if(empty($dvem)) {
    $variables['date_val_dates'] = date('d',strtotime($dvm));
  }
  else {
    $variables['date_val_dates'] = date('d',strtotime($dvm)) . "-" . date('d',strtotime($dvem));
  }
}

function bootstrap_preprocess_views_view_fields(&$variables) {  
  $view = $variables['view'];  
  $id = $view->storage->id();  
  if($id == "intro5_form" && $view->current_display == "block_1") {
    $return_url = 'http://'.$_SERVER['HTTP_HOST'].base_path().'landing-page-thank-you';
      $variables['base_path'] = urlencode($return_url);
  }    
}

function bootstrap_preprocess_views_view(&$variables){
  $view = $variables['view'];  
  $id = $view->storage->id(); 
  if($id == "slices_slider_3" && $view->current_display == "block_1") {   
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node) {     
      $nid = $node->id();    
    }
    $node = Node::load($nid);
    // $variables['bg_color_slider_3'] = $node->get('field_background_color_slider_3')->getValue()[0]['value'];    
    // $variables['slider_3_title'] = $node->get('field_slider_3_title')->getValue()[0]['value'];        
    $variables['slider_3_title'] = $node->get('field_text_h1')->getValue()[0]['value'];     
    // print 'sdasdasdsad---------------------------' ;
    //  dpm($variables['slider_3_title']);
    // base_path()
  }
}

function bootstrap_preprocess_node(&$variables) {
   $node = $variables['elements']['#node'];  
   if($variables['elements']['#view_mode'] == "rlp" && ($node->getType() == "intro_5_" || $node->getType() == "datasheets" || $node->getType() == "security_report"|| $node->getType() == "surveys_and_studies" || $node->getType() == "whitepapers" || $node->getType() == "webinar")) {
  
      $d = $node->get('field_report_fields')->referencedEntities();
      $vault = array();
      
      foreach ($d as $item) {
        if($item->bundle() == "thank_you_page_deliverables") {  
      $file = $item->get('field_downloadable_files');
      $file_val = $file->getValue();

      $link = $item->get('field_url_links');
      $link_val = $link->getValue();
          $vault['thank_you_deli'] = array('file' => array('id' => isset($file_val[0]['target_id'])?$file_val[0]['target_id']:"", 'desc' => isset($file_val[0]['description'])?$file_val[0]['description']:''), 'url' => array('title' => isset($link_val[0]['title'])?$link_val[0]['title']:'', 'link' => isset($link_val[0]['uri'])?$link_val[0]['uri']:''));
        }
        if($item->bundle() == "form_landing_page") {
          $vault['form_landing'] = array('download_text' => strip_tags($item->get('field_field_form_button_text')->value), 'form_title' => strip_tags($item->get('field_form_banner_text')->value), 'iframe' => $item->get('field_form_url')->value, 'body_text' => strip_tags($item->get('field_form_body_text')->value));

        }
        if($item->bundle() == "thank_you_page") {
          $vault['thank_you'] = array('ty_banner_text' => $item->get('field_thank_you_frame_banner_tex')->value, 'ty_body' => $item->get('field_thank_you_frame_body')->value);
        }
      }

      $return_url = 'http://'.$_SERVER['HTTP_HOST'].base_path().'landing-page-thank-you/'.$node->get('nid')->value;
      $return_url_encoded = urlencode($return_url);
      $variables['return_url_encoded'] = $return_url_encoded;
      $variables['output'] = $vault;

    if($node->get('field_vaulted')->value == 0) { // Non-vaulted
      $n = $node->get('nid')->value;
      $variables['view_output'] = views_embed_view('intro5_form', 'block_3',"$n");
      $variables['vault']  = array('value' => 0);
    }
    else { // Vaulted
      $variables['vault'] = array('value' => 1);
    }
   }
}
